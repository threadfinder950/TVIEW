"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Person = void 0;
var PARENT_TAGS = {
    BIRT: 'BIRT',
    EDUC: 'EDUC',
};
var TAG_GED = __assign({ DATE: 'DATE', PLAC: 'PLAC', NOTE: 'NOTE', CONC: 'CONC', CONT: 'CONT', CHIL: 'CHIL', FAMS: 'FAMS' }, PARENT_TAGS);
var Person = /** @class */ (function () {
    function Person(id) {
        this.id = id;
        this.info = {};
    }
    Object.defineProperty(Person.prototype, "data", {
        get: function () {
            return this.info;
        },
        enumerable: false,
        configurable: true
    });
    Person.prototype.getLine = function (tag, value) {
        if (PARENT_TAGS[tag]) {
            this.currentParentTag = tag;
        }
        switch (tag) {
            case TAG_GED.DATE:
                this.addDataCase(tag, TAG_GED.BIRT, value);
                this.addDataCase(tag, TAG_GED.EDUC, value);
                break;
            case TAG_GED.PLAC:
                this.addDataCase(tag, TAG_GED.EDUC, value);
                break;
            case TAG_GED.NOTE:
                this.addDataCase(tag, TAG_GED.EDUC, value);
                break;
            case TAG_GED.CONC:
                this.addDataCase(tag, TAG_GED.EDUC, value);
                break;
            case TAG_GED.CONT:
                this.addDataCase(tag, TAG_GED.EDUC, value);
                break;
            case TAG_GED.CHIL:
                this.addDataToArray(value, TAG_GED.CHIL);
                break;
            case TAG_GED.FAMS:
                this.addDataToArray(value, TAG_GED.FAMS);
                break;
            default:
                this.setValue(tag, value.join(' '));
        }
    };
    Person.prototype.setValue = function (field, value) {
        if (field === void 0 || value === void 0)
            return;
        this.info[field] = value;
    };
    Person.prototype.addDataCase = function (TAG_LINE, COMPARE_TAG, value) {
        if (this.currentParentTag === COMPARE_TAG) {
            if (!this.info[COMPARE_TAG]) {
                this.info[COMPARE_TAG] = {};
            }
            this.info[COMPARE_TAG][TAG_LINE] = value.join(' ');
        }
    };
    Person.prototype.addDataToArray = function (value, TAG_LINE) {
        if (!this.info[TAG_LINE]) {
            this.info[TAG_LINE] = [];
        }
        this.info[TAG_LINE].push(value.join(' '));
    };
    return Person;
}());
exports.Person = Person;
